@using ODK.Core.Chapters
@using ODK.Services.Caching
@using ODK.Web.Common.Components
@using ODK.Web.Razor.Models.Header
@model ODK.Web.Razor.Models.Header.NavbarViewModel
@inject IRequestCache RequestCache
@{
    IReadOnlyCollection<Chapter> memberChapters = [];

    if (Model.Member != null)
    {
        var chapters = await RequestCache.GetChaptersAsync();
        memberChapters = chapters
            .Where(x => Model.Member.IsMemberOf(x.Id))
            .OrderBy(x => x.Name)
            .ToArray();
    }

    var accountMenu = new AccountMenuViewModel
    {
        CurrentChapter = Model.Chapter,
        Member = Model.Member,
        MemberChapters = memberChapters
    };

    var id = Model.Id ?? "navbar-main";

    var menuGroups = Model.MenuItems;    
}

<nav class="navbar
            @Model.CssClass
            @(Model.IsDark ? "navbar-dark bg-dark" : null)
            @(Model.IsLight ? "navbar-light bg-light text-dark" : null)
            @(Model.Breakpoint == "sm" ? "navbar-expand-sm" : null)
            @(Model.Breakpoint == "md" ? "navbar-expand-md" : null)
            @(Model.Breakpoint == "lg" ? "navbar-expand-lg" : null)
            @(Model.Compact ? "navbar-compact" : null)">
    <div class="position-relative
                @(Model.Fluid ? "container-fluid" : "container")">
        <div class="d-flex align-items-center">
            @if (Model.MenuItems.Any(x => x.Any(y => y.Hidden)))    
            {
                <button class="navbar-toggler @(Model.MenuItems.Length == 0 ? "invisible" : "")"
                        type="button" data-bs-toggle="collapse" data-bs-target="#@id"
                        aria-controls="@id" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
            }            
            
            @if (!Model.HideAccountMenu)
            {
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <div class="d-flex gap-4 account-links--right">
                        @await Html.PartialAsync("Header/_NotificationDropdown")
                        @await Html.PartialAsync("Header/_AccountDropdown", accountMenu)
                    </div>
                }
                else
                {
                    @await Html.PartialAsync("Header/_AnonymousLinks", accountMenu)
                }
            }
        </div>

        <div class="collapse navbar-collapse flex-column" id="@id">
            @foreach (var group in menuGroups)
            {
                <ul class="navbar-nav">
                    @foreach (var menuItem in group)
                    {
                        <li class="nav-item @(menuItem.Hidden ? "invisible" : null)">
                            <a class="nav-link @(Model.IsLight ? "text-dark" : "")"
                               data-menu-link="@(menuItem.ActiveIsExactMatch ? "exact" : null)"
                               href="@(menuItem.Link ?? menuItem.ExternalLink)"
                               target="@(!string.IsNullOrEmpty(menuItem.ExternalLink) ? "_blank" : null)">
                                @if (!string.IsNullOrEmpty(menuItem.Text))
                                {
                                    <span>@menuItem.Text</span>
                                }

                                @if (!string.IsNullOrEmpty(menuItem.Icon))
                                {
                                    <i class="@menuItem.Icon"></i>
                                }
                            </a>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</nav>