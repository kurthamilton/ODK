@using ODK.Web.Razor.Models.Account
@using ODK.Web.Razor.Models.Components
@using ODK.Web.Common.Extensions
@model LocationFormViewModel
@{
    var latLong = Model.Lat != null && Model.Long != null
        ? $"{Model.Lat},{Model.Long}"
        : null;

    var distanceUnitOptions = Model.DistanceUnitOptions
        .Select(x => new SelectListItem
        {
            Value = x.Id.ToString(),
            Text = x.Name
        })
        .ToArray();
}

<div class="form-group mb-3 required">
    @Html.LabelFor(x => x.TimeZoneId, new { @class = "form-label" })
    @Html.OdkTimeZoneDropDownFor(x => x.TimeZoneId, new { @class = "form-select", data_searchable = "" })
    @Html.ValidationMessageFor(x => x.TimeZoneId)
</div>

<div class="form-group mb-3 required" data-location-container>
    @Html.LabelFor(x => x.Name, new { @class = "form-label" })    
    
    @await Html.PartialAsync("Components/_LocationPicker", Model)    
    <div class="text-muted">
        We use your location to help you find local groups.
    </div>
    <div class="text-muted">
        It is not seen by other members. It does not need to be an exact address.
    </div>
    @Html.ValidationMessageFor(x => x.Name)
    <input type="hidden" id="map-latlong" data-location-latlong value="@latLong" />
</div>

<div class="form-group mb-3 d-none" data-map-container>
    @await Html.PartialAsync("Components/_GoogleMap", new GoogleMapViewModel
    {
        QuerySource = "#map-latlong",
        Zoom = GoogleMapViewModel.ZoomLevelCity
    })
</div>

@if (distanceUnitOptions.Length > 0)
{
    <div class="form-group mb-3">
        @Html.LabelFor(x => x.DistanceUnit, new { @class = "form-label" })
        @if (Model.DistanceUnit != null)
        {
            @*Do not allow the removal of distance unit once set*@
            @Html.DropDownListFor(x => x.DistanceUnit, distanceUnitOptions, new { @class = "form-select" })
        }
        else
        {
            @Html.DropDownListFor(x => x.DistanceUnit, distanceUnitOptions, "", new { @class = "form-select" })
        }
        
        @Html.ValidationMessageFor(x => x.DistanceUnit)
    </div>
}