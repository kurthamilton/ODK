@using ODK.Core.Chapters
@using ODK.Core.DataTypes
@using ODK.Core.Members
@using ODK.Services.Caching
@using ODK.Services.Chapters
@using ODK.Services.Members
@using ODK.Services.Users.ViewModels
@using ODK.Web.Common.Extensions
@using ODK.Web.Razor.Models.Account
@model ChapterProfileFormViewModel
@{
    var memberId = User.MemberIdOrDefault();

    var chapterPropertyDictionary = Model.ChapterProperties
        .ToDictionary(x => x.Id);

    var chapterPropertyOptionDictionary = Model.ChapterPropertyOptions
        .GroupBy(x => x.ChapterPropertyId)
        .ToDictionary(x => x.Key, x => x.ToArray());

    var applicationCheckboxesRendered = false;
    var imageUploadRendered = false;
}

@for (int i = 0; i < Model.Properties.Count; i++)
{
    var property = Model.Properties[i];
    chapterPropertyDictionary.TryGetValue(property.ChapterPropertyId, out var chapterProperty);
    if (chapterProperty == null)
    {
        continue;
    }

    if (memberId == null && 
        !applicationCheckboxesRendered && 
        chapterProperty.ApplicationOnly && 
        chapterProperty.DataType == DataType.Checkbox)
    {
        @*Hack to show the picture upload before the confirmation checkboxes*@
        <div class="form-group mb-3 required">
            <label class="form-label">Picture</label>
            @await Html.PartialAsync("Account/_PictureUpload", new PictureUploadViewModel
            {
                ChapterName = Model.ChapterName
            })
        </div>

        applicationCheckboxesRendered = true;
        imageUploadRendered = true;
    }

    var htmlAttributes = new Dictionary<string, object>();
    if (chapterProperty.Required == true)
    {
        var label = !string.IsNullOrEmpty(chapterProperty.DisplayName) 
            ? chapterProperty.DisplayName 
            : chapterProperty.Label;
        htmlAttributes.Add("data-val", "true");
        htmlAttributes.Add("data-val-required", $"The {label} field is required.");
    }

    @Html.HiddenFor(x => x.Properties[i].ChapterPropertyId)

    <div class="form-group mb-3 
            @(chapterProperty.Required == true ? "required" : null)
            @(chapterProperty.DataType == DataType.Checkbox ? "form-check" : null)">
        
        @if (chapterProperty.DataType != DataType.Checkbox)
        {
            <label class="form-label" for="@Html.IdFor(x => x.Properties[i].Value)">
                @Html.Raw(chapterProperty.Label ?? "")
            </label>
        }
        
        @if (!string.IsNullOrEmpty(chapterProperty.HelpText))
        {
            <span>
                @await Html.PartialAsync("Components/_Tooltip", chapterProperty.HelpText)
            </span>
        }
        
        @if (!string.IsNullOrEmpty(chapterProperty.Subtitle))
        {
            <span class="ms-1 text-muted">@chapterProperty.Subtitle</span>
        }

        @if (chapterProperty.DataType == DataType.Checkbox)
        {            
            <input 
                id="@Html.IdFor(x => x.Properties[i].Value)"
                name="@Html.NameFor(x => x.Properties[i].Value)"
                value="true"
                class="form-check-input"
                type="checkbox"
                data-val="true"
                data-val-required="@(chapterProperty.Required ? $"The {chapterProperty.DisplayName} field is required." : null)" />
            
            <label for="@Html.IdFor(x => x.Properties[i].Value)" class="form-check-label">
                @Html.Raw(chapterProperty.Label ?? "")
            </label>
        }
        else if (chapterProperty.DataType == DataType.DropDown)
        {
            chapterPropertyOptionDictionary.TryGetValue(property.ChapterPropertyId, out var options);

            var selectList = options
                ?.OrderBy(x => x.DisplayOrder)
                .Select(x => new SelectListItem { Text = x.Value })
                .ToArray() ?? [];

            string? selectedValue = Model.Properties[i].Value;
            if (!string.IsNullOrEmpty(selectedValue) 
                && selectList.All(x => x.Text != selectedValue)
                && selectList.Any(x => x.Text == "Other"))
            {
                Model.Properties[i].OtherValue = selectedValue;
                Model.Properties[i].Value = "Other";
            }

            var textBoxHtmlAttributes = new Dictionary<string, object>(htmlAttributes);
            textBoxHtmlAttributes.Add("class", "form-control d-none");

            htmlAttributes.Add("class", "form-select");
            htmlAttributes.Add("data-select-freetext", $"#{Html.IdFor(x => x.Properties[i].OtherValue)}");
            htmlAttributes.Add("data-select-freetext-value", "Other");

            @Html.DropDownListFor(x => x.Properties[i].Value, selectList, "Select...", htmlAttributes)
            @Html.TextBoxFor(x => x.Properties[i].OtherValue, textBoxHtmlAttributes)
            @Html.ValidationMessageFor(x => x.Properties[i].OtherValue)
        }
        else if (chapterProperty.DataType == DataType.LongText)
        {
            htmlAttributes.Add("class", "form-control");
            htmlAttributes.Add("rows", "3");

            @Html.TextAreaFor(x => x.Properties[i].Value, htmlAttributes)
        }
        else if (chapterProperty.DataType == DataType.Url)
        {
            htmlAttributes.Add("class", "form-control");

            if (chapterProperty.Name == "facebook")
            {
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fab fa-facebook-f"></i>
                    </span>
                    @Html.TextBoxFor(x => x.Properties[i].Value, htmlAttributes)
                </div>
            }
            else
            {
                @Html.TextBoxFor(x => x.Properties[i].Value, htmlAttributes)
            }
        }
        else
        {
            htmlAttributes.Add("class", "form-control");

            @Html.TextBoxFor(x => x.Properties[i].Value, htmlAttributes)
        }

        @Html.ValidationMessageFor(x => x.Properties[i].Value)
    </div>
}

@if (memberId == null)
{
    if (!imageUploadRendered)
    {
        <div class="form-group mb-3 required">
            <label class="form-label">Picture</label>
            @await Html.PartialAsync("Account/_PictureUpload", new PictureUploadViewModel
            {
                ChapterName = Model.ChapterName
            })
        </div>
    }

    <div class="mb-3 form-check required">
        <input id="@Html.IdFor(x => x.PrivacyPolicy)"
               name="@Html.NameFor(x => x.PrivacyPolicy)"
               class="form-check-input"
               type="checkbox"
               value="true"
               data-val="true"
               data-val-required="The Privacy field is required." />

        <label for="@Html.IdFor(x => x.PrivacyPolicy)" class="form-check-label">
            I have read the <a href="/Privacy" target="_blank">privacy policy</a>
        </label>
        @Html.ValidationMessageFor(x => x.PrivacyPolicy)
    </div>
}