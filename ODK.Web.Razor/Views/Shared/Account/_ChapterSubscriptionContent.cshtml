@using ODK.Core.Chapters
@using ODK.Core.Countries
@using ODK.Core.Extensions
@using ODK.Core.Members
@using ODK.Core.Payments
@using ODK.Services.Chapters
@using ODK.Services.Members
@using ODK.Services.Payments
@using ODK.Web.Common.Extensions
@using ODK.Web.Razor.Models
@using ODK.Web.Razor.Models.Account
@using ODK.Web.Razor.Models.Components
@using ODK.Web.Razor.Models.Payments
@model ODK.Web.Razor.Models.Account.ChapterSubscriptionContentViewModel
@inject IChapterService ChapterService
@{
    var memberId = User.MemberId();
    var dto = await ChapterService.GetChapterMemberSubscriptionsDto(memberId, Model.Chapter);

    var (memberSubscription, chapterSubscriptions, paymentSettings, currency, externalSubscription) = 
        (dto.MemberSubscription, dto.ChapterSubscriptions, dto.PaymentSettings, dto.Currency, dto.ExternalSubscription);

    var title = memberSubscription == null || memberSubscription.Type == SubscriptionType.Trial 
        ? "Purchase membership" 
        : "Renew membership";
}

@if (currency == null)
{
    <div class="alert alert-error">
        This group has not set its payment settings
    </div>
    return;
}

<div class="form-group mb-3">
    <label class="form-label">Membership type</label>
    <div class="form-control-plaintext">
        @if (memberSubscription != null)
        {
            <span>@memberSubscription.Type</span>
        }
        else
        {
            <span>-</span>
        }
    </div>
</div>

<div class="form-group mb-3">
    <label class="form-label">End date</label>
    <div class="form-control-plaintext">
        @if (memberSubscription?.ExpiresUtc != null)
        {
            <span>
                @Model.Chapter.ToLocalTime(memberSubscription.ExpiresUtc.Value).ToString("d MMMM yyyy")
            </span>
        }
        else
        {
            <span>-</span>
        }
    </div>
</div>

@if (externalSubscription?.Status == ExternalSubscriptionStatus.Active)
{
    @if (externalSubscription.NextBillingDate != null)
    {
        <div class="form-group mb-3">
            <label class="form-label">Next payment date</label>
            <div class="form-control-plaintext">
                <span>
                    @Model.Chapter.ToLocalTime(externalSubscription.NextBillingDate.Value).ToString("d MMMM yyyy")
                </span>
            </div>
        </div>
    }    

    <div>
        <form action="/Chapters/@Model.Chapter.Id/Account/Subscription/Cancel" method="post">
            <input type="hidden" name="@nameof(CancelSubscriptionRequest.ExternalId)" value="@externalSubscription.ExternalId" />
            <button class="btn btn-danger" onclick="return confirm('Are you sure you want to cancel your subscription?');">
                Cancel subscription
            </button>
        </form>
    </div>
}
else
{
    <h3>@title</h3>

    @foreach (var chapterSubscription in chapterSubscriptions)
    {
        var modalId = $"payment-modal-{chapterSubscription.Id}";

        <div class="mb-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@chapterSubscription.Title</h5>
                    <div class="card-text">
                        @Html.Raw(chapterSubscription.Description)
                    </div>
                    <div>
                        @if (Model.PaymentSettings?.Provider == PaymentProviderType.Stripe)
                        {
                            <a class="btn btn-primary mr-1" href="/@Model.Chapter.Name/account/subscription/@chapterSubscription.Id/checkout">
                                Purchase
                            </a>
                        }
                        else
                        {
                            <button class="btn btn-primary mr-1"
                                    data-bs-toggle="modal" data-bs-target="#@modalId">
                                Purchase
                            </button>
                        }

                        <span>@currency.ToAmountString(chapterSubscription.Amount)</span>

                        @await Html.PartialAsync("Payments/_PaymentModal", new PaymentModalViewModel
                       {
                           Action = $"/Chapters/{Model.Chapter.Id}/Account/Subscription/Purchase",
                           PaymentSettings = Model.PaymentSettings,
                           FormContentFunc =
                                @<input type="hidden" name="subscriptionId" value="@chapterSubscription.Id" />,
                           Id = modalId,
                           PaymentForm = new PaymentFormViewModel
                           {
                               Amount = (decimal)chapterSubscription.Amount,
                               Currency = currency,
                               Description = chapterSubscription.Title,
                               Id = chapterSubscription.Id.ToString()
                           },
                           Title = title
                       })

                    </div>
                </div>
            </div>
        </div>
    }

    @if (paymentSettings?.Provider?.HasCheckout() != true)
    {
        @await Html.PartialAsync("Payments/_PaymentScripts", new PaymentScriptsViewModel
        {
            ApiPublicKey = paymentSettings?.ApiPublicKey ?? "",
            CurrencyCode = currency?.Code ?? "",
            IsSubscription = false,
            Provider = paymentSettings?.Provider ?? default
        })
    }
}