@using ODK.Core.Chapters
@using ODK.Core.Events
@using ODK.Services.Chapters.ViewModels
@using ODK.Services.Events
@using ODK.Services.Events.ViewModels
@using ODK.Web.Common.Routes
@using ODK.Web.Razor.Models.Chapters
@using ODK.Web.Razor.Models.Components
@using ODK.Web.Razor.Models.Events
@model GroupHomePageViewModel

<div class="row">
    <div class="col-md-8">
        @if (Model.IsMember || Model.IsAdmin)
        {
            @await Html.PartialAsync("Components/_EditableTextArea", new EditableTextViewModel
            {
                Action = $"/admin/groups/{Model.Chapter.Id}/description",
                Id = "group-description",
                IsAdmin = Model.IsAdmin,
                Name = "description",
                Text = Model.Texts?.Description,
                Title = "About us"
            })
        }        

        @if (!Model.IsMember || Model.IsAdmin)
        {
            <section class="section">
                @await Html.PartialAsync("Components/_EditableHtml", new EditableTextViewModel
                {
                    Action = $"/admin/groups/{Model.Chapter.Id}/texts/welcome",
                    Id = "group-texts-welcome",
                    IsAdmin = Model.IsAdmin,
                    Name = "text",
                    Text = Model.Texts?.WelcomeText,
                    Title = "Join us"
                })

                @if (!Model.IsMember)
                {
                    <a href="@OdkRoutes2.Groups.Join(Model.Platform, Model.Chapter)" class="btn btn-success">
                        Join
                    </a>
                }                
            </section>
        }

        @if (Model.UpcomingEvents.Count > 0)
        {
            <section class="section">
                <h3>Upcoming events</h3>
                @await Html.PartialAsync("Events/_EventList", new EventListViewModel
                {
                    Chapter = Model.Chapter,
                    Events = Model.UpcomingEvents
                        .Select(x => new EventResponseViewModel(
                            @event: x.Event, 
                            venue: x.Venue, 
                            response: x.Response?.Type ?? EventResponseType.None, 
                            invited: false,
                            responseSummary: x.ResponseSummary))
                        .ToArray(),
                    Platform = Model.Platform,
                    TimeZone = Model.Chapter.TimeZone ?? TimeZoneInfo.FindSystemTimeZoneById(Chapter.DefaultTimeZoneId)
                })
            </section>
        }

        @if (Model.RecentEvents.Count > 0)
        {
            <section class="section">
                <h3>Recent events</h3>
                @await Html.PartialAsync("Events/_EventList", new EventListViewModel
                {
                    Chapter = Model.Chapter,
                    Events = Model.RecentEvents
                        .Select(x => new EventResponseViewModel(
                            @event: x.Event, 
                            venue: x.Venue, 
                            response: x.Response?.Type ?? EventResponseType.None, 
                            invited: false,
                            responseSummary: x.ResponseSummary))
                        .ToArray(),
                    Platform = Model.Platform,
                    TimeZone = Model.Chapter.TimeZone ?? TimeZoneInfo.FindSystemTimeZoneById(Chapter.DefaultTimeZoneId)
                })
            </section>
        }        
    </div>    
    <div class="col-md-4">
        @await Html.PartialAsync("Groups/_GroupContentSidebar", Model)
    </div>
</div>