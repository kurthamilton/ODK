@using Microsoft.AspNetCore.Html
@using ODK.Core.Notifications
@using ODK.Web.Common.Routes
@using ODK.Web.Razor.Models.Notifications
@model NotificationListItemViewModel
@{
    var (notification, platform) = (Model.Notification, Model.Platform);

    var title = notification.Type switch
    {
        NotificationType.ChapterContactMessage => "New contact message",
        NotificationType.ConversationOwnerMessage => "New conversation message",
        NotificationType.ConversationAdminMessage => "New conversation message",
        NotificationType.NewEvent => "New event",
        NotificationType.NewMember => "New member",
        _ => null
    };

    var url = notification.Type switch
    {
        NotificationType.ChapterContactMessage => notification.Chapter != null && notification.EntityId != null
            ? OdkRoutes.MemberGroups.GroupMessage(platform, notification.Chapter, notification.EntityId.Value)
            : null,
        NotificationType.ConversationAdminMessage => notification.Chapter != null && notification.EntityId != null
            ? OdkRoutes.Groups.Conversation(platform, notification.Chapter, notification.EntityId.Value)
            : null,
        NotificationType.ConversationOwnerMessage => notification.Chapter != null && notification.EntityId != null
            ? OdkRoutes.MemberGroups.GroupConversation(platform, notification.Chapter, notification.EntityId.Value)
            : null,
        NotificationType.NewEvent => notification.Chapter != null && notification.EntityId != null
            ? OdkRoutes.Groups.Event(platform, notification.Chapter, notification.EntityId.Value)
            : null,
        NotificationType.NewMember => notification.Chapter != null && notification.EntityId != null
            ? OdkRoutes.MemberGroups.Member(platform, notification.Chapter, notification.EntityId.Value)
            : null,
        _ => null
    };

    Func<object?, IHtmlContent> notificationContent =
        @<div>            
            <div class="notification-text">
                @foreach (var paragraph in notification.Text.Split(Environment.NewLine))
                {
                    <p>@paragraph</p>
                }
            </div>
        </div>;
}

<div>
    <div class="notification-row notification-header">
        <div class="notification-col">
            <strong class="notification-title">@title</strong>
        </div>
        <div class="notification-col-icon">
            <button type="button" class="btn-close notification-icon" aria-label="Dismiss"
                    data-bs-toggle="tooltip" data-bs-title="Dismiss"
                    data-notification-dismiss="/account/notifications/@notification.Id/dismiss"></button>
        </div>        
    </div>
    <div class="notification-body">
        @if (!string.IsNullOrEmpty(url))
        {
            <a class="notification-row notification-link" href="@url">
                <div class="notification-col">
                    @notificationContent.Invoke(null)
                </div>
                <div class="notification-col-icon">
                    @await Html.PartialAsync("Components/Icons/_ChevronRight")
                </div>
            </a>
        }
        else
        {
            @notificationContent.Invoke(null)
        }
    </div>    
</div>