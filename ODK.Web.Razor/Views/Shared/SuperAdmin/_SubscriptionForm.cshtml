@using ODK.Services.Subscriptions
@using ODK.Web.Common.Extensions
@model ODK.Web.Razor.Models.SuperAdmin.SiteSubscriptionFormViewModel
@inject ISiteSubscriptionAdminService SiteSubscriptionAdminService
@{
    var memberId = User.MemberId();
    var siteSubscriptions = await SiteSubscriptionAdminService.GetAllSubscriptions(memberId);
    var fallbackOptions = siteSubscriptions
        .Where(x => x.Id != Model.SiteSubscriptionId)
        .Select(x => new SelectListItem { Value = x.Id.ToString(), Text = x.Name })
        .OrderBy(x => x.Text)
        .ToArray();

    var sitePaymentSettingsOptions = Model
        .SitePaymentSettings
        .Select(x => new SelectListItem
        {
            Value = x.Id.ToString(),
            Text = x.Name
        })
        .ToArray();
}

<div class="form-group mb-3 required">
    @Html.LabelFor(x => x.SitePaymentSettingId, new { @class = "form-label" })
    @Html.DropDownListFor(x => x.SitePaymentSettingId, sitePaymentSettingsOptions, 
        Model.SitePaymentSettingId != null 
            ? new { @class = "form-select", disabled = "" }
            : new { @class = "form-select" })
    @Html.ValidationMessageFor(x => x.SitePaymentSettingId)
</div>

<div class="form-group mb-3 required">
    @Html.LabelFor(x => x.Name, new { @class = "form-label" })
    @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
    @Html.ValidationMessageFor(x => x.Name)
</div>

<div class="form-group mb-3 required">
    @Html.LabelFor(x => x.Description, new { @class = "form-label" })
    @Html.TextAreaFor(x => x.Description, new { @class = "form-control", data_html_editor = "" })
    @Html.ValidationMessageFor(x => x.Description)
</div>

<div class="form-group mb-3">
    @Html.LabelFor(x => x.FallbackSiteSubscriptionId, new { @class = "form-label" })
    @Html.DropDownListFor(x => x.FallbackSiteSubscriptionId, fallbackOptions, "", new { @class = "form-select" })
    @Html.ValidationMessageFor(x => x.FallbackSiteSubscriptionId)
</div>

<div class="form-check mb-3">
    @Html.CheckBoxFor(x => x.Enabled, new { @class = "form-check-input" })
    @Html.LabelFor(x => x.Enabled, new { @class = "form-check-label" })    
</div>

<div class="form-group mb-3">
    @Html.LabelFor(x => x.GroupLimit, new { @class = "form-label" })
    @Html.TextBoxFor(x => x.GroupLimit, new { @class = "form-control", type = "number" })
    @Html.ValidationMessageFor(x => x.GroupLimit)
</div>

<div class="form-group mb-3">
    @Html.LabelFor(x => x.MemberLimit, new { @class = "form-label" })
    @Html.TextBoxFor(x => x.MemberLimit, new { @class = "form-control", type = "number" })
    @Html.ValidationMessageFor(x => x.MemberLimit)
</div>

<div class="form-check mb-3">
    @Html.CheckBoxFor(x => x.MemberSubscriptions, new { @class = "form-check-input" })
    @Html.LabelFor(x => x.MemberSubscriptions, new { @class = "form-check-label" })
</div>

<div class="form-check mb-3">
    @Html.CheckBoxFor(x => x.SendMemberEmails, new { @class = "form-check-input" })
    @Html.LabelFor(x => x.SendMemberEmails, new { @class = "form-check-label" })
</div>

<div class="form-check mb-3">
    @Html.CheckBoxFor(x => x.Premium, new { @class = "form-check-input" })
    @Html.LabelFor(x => x.Premium, new { @class = "form-check-label" })
</div>

