@using ODK.Core.Extensions
@using ODK.Core.Members
@using ODK.Core.Utils
@using ODK.Services.Events.ViewModels
@using ODK.Web.Razor.Models.Components
@using ODK.Web.Razor.Models.Events
@model EventPageViewModel
@{
    var localTime = Model.Event.ToLocalTime(Model.Chapter.TimeZone);
}

@if (!Model.CanView)
{
    <p>You are not permitted to view this event</p>
    return;
}

@await Html.PartialAsync("Components/_AdminBar", new AdminBarViewModel
{
    AdminLink = $"/{Model.Chapter.Name}/Admin/Events/{Model.Event.Id}",
    AdminLinkText = "Edit",
    Chapter = Model.Chapter,
    CurrentMember = Model.CurrentMember,
    Toolbar = 
        @<div>
            @if (Model.Event.PublishedUtc == null)
            {
                <form action="/@Model.Chapter.Name/Admin/Events/@Model.Event.Id/Publish" method="post">
                    <button class="btn btn-primary">
                        <i class="fa-solid fa-upload"></i>
                        Publish
                    </button>
                </form>
            }
        </div>
})

@if (Model.Venue != null)
{
    <h2>@Model.Venue.Name</h2>
}

<h4>@localTime.ToFriendlyDateString(null)</h4>

@if (localTime.TimeOfDay.TotalSeconds > 0)
{
    <h5>
        @if (Model.Event.EndTime == null)
        {
            <span>From</span>
        }

        <span>@localTime.ToString("HH:mm")</span>

        @if (Model.Event.EndTime != null)
        {
            <span>-</span>
            <span>@TimeSpanUtils.ToString(Model.Event.EndTime)</span>
        }
    </h5>
}
else if (!string.IsNullOrEmpty(Model.Event.Time))
{
    <h5>@Model.Event.Time</h5>
}

@if (!string.IsNullOrEmpty(Model.Event.Description))
{
    <div>
        @Html.Raw(Model.Event.Description)
    </div>
}

@if (!string.IsNullOrEmpty(Model.Event.ImageUrl))
{
    <p *ngIf="event.imageUrl">
        <img src="@Model.Event.ImageUrl" style="max-height: 500px;" />
    </p>
}

@if (Model.CanRespond && Model.Event.CanComment && Model.Comments.Comments != null)
{
    var memberDictionary = Model.Comments.Members != null
        ? Model.Comments.Members.ToDictionary(x => x.Id)
        : new Dictionary<Guid, Member>();

    <h3 class="mt-5">
        Comments
        @if (Model.CurrentMember != null)
        {
            @await Html.PartialAsync("Components/_FeatureTooltip",
                new FeatureTooltipViewModel
                {
                    Name = "Events.Comments"
                })
        }        
    </h3>

    @foreach (var comment in Model.Comments.Comments)
    {
        if (!memberDictionary.TryGetValue(comment.MemberId, out var member))
        {
            continue;
        }

        <div class="mb-3">
            <div>
                <strong>@member.FullName</strong>
                <span>
                    @TimeZoneEntityExtensions.ToLocalTime(Model.Chapter, comment.CreatedUtc).ToString("dddd dd MMMM yyyy HH:mm")
                </span>
                <span>
                    <a data-bs-toggle="collapse" href="#comment-reply-@comment.Id" role="button" aria-expanded="false" aria-controls="collapseExample">
                        Reply
                    </a>
                </span>
            </div>
            <div>
                @comment.Text
            </div>
            <div class="collapse" id="comment-reply-@comment.Id">
                <form action="/@Model.Chapter.Name/Events/@Model.Event.Id/Comments" method="post">
                    @await Html.PartialAsync("Events/_EventCommentForm", new EventCommentFormViewModel
                    {
                        Parent  = comment.Id,
                        Text = ""
                    })
                    <button class="btn btn-primary">Submit</button>
                </form>
            </div>            
        </div>
    }

    <div>
        <form action="/@Model.Chapter.Name/Events/@Model.Event.Id/Comments" method="post">
            @await Html.PartialAsync("Events/_EventCommentForm", new EventCommentFormViewModel
            {
                Text = ""
            })
            <button class="btn btn-primary">Submit</button>
        </form>
    </div>
}

@if (Model.Venue != null && !string.IsNullOrEmpty(Model.Venue.MapQuery))
{
    <h3 class="mt-5">Location</h3>
    <hr/>
    @await Html.PartialAsync("Components/_GoogleMap", new GoogleMapViewModel
    {
        Query = Model.Venue.MapQuery
    })
    @if (!string.IsNullOrEmpty(Model.Venue.MapQuery))
    {
        <p>
            <a href="https://maps.google.com?q=@Model.Venue.MapQuery" target="_blank">View in Google maps</a>
        </p>
    }    
}
