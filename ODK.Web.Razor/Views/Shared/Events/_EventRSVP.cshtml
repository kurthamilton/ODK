@using ODK.Core.Events
@using ODK.Core.Utils
@using ODK.Services.Events.ViewModels
@using ODK.Web.Razor.Models.Events
@model EventPageViewModel
@{
    Model.MembersByResponse.TryGetValue(EventResponseType.Yes, out var attendees);
    
    var spacesLeft = Model.SpacesLeft;
    var canRsvp = Model.MemberResponse == EventResponseType.Yes
        || ((spacesLeft == null || spacesLeft > 0) && !Model.Event.RsvpDeadlinePassed);
}

<div class="card sidebar-card">
    <div class="card-header">RSVP</div>
    <div class="card-body card-body-sm">
        <div class="d-flex flex-column gap-3">
            @await Html.PartialAsync("Events/_EventStatus", new EventStatusViewModel
            {
                Chapter = Model.Chapter,
                Event = Model.Event,
                SpacesLeft = Model.SpacesLeft
            })

            @if (canRsvp)
            {
                if (Model.Event.RsvpDeadlinePassed)
                {                    
                    <form action="/events/@Model.Event.Id/rsvp" method="post">
                        @*@Html.AntiForgeryToken()*@
                        <input type="hidden" name="responseType" value="@EventResponseType.No" />
                        <button class="btn btn-danger" onclick="return confirm('Are you sure you want to cancel your RSVP? This action cannot be undone');">
                            Cancel RSVP
                        </button>
                    </form>
                }
                else
                {
                    <div class="d-flex justify-content-around">
                        @foreach (var responseType in Model.ResponseTypes)
                        {
                            var active = responseType == Model.MemberResponse;
                            
                            <form action="/events/@Model.Event.Id/rsvp" method="post">
                                @await Html.PartialAsync("Events/_EventResponseIcon", new EventResponseIconViewModel
                                {
                                    Active = active,
                                    CurrentResponse = responseType,
                                    ResponseType = active ? EventResponseType.None : responseType
                                })
                            </form>
                        }
                    </div>
                }            
            }  
        </div>              
    </div>
</div>