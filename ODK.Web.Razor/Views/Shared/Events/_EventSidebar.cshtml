@using ODK.Core.Events
@using ODK.Core.Members
@using ODK.Services.Authorization
@using ODK.Services.Caching
@using ODK.Services.Events
@using ODK.Services.Events.ViewModels
@using ODK.Services.Members
@using ODK.Web.Common.Extensions
@using ODK.Web.Razor.Models.Events
@using ODK.Web.Razor.Models.Members
@using ODK.Web.Razor.Models.Payments
@model EventPageViewModel

<div class="sidebar">
    @if (Model.Hosts.Count > 0)
    {
        <div class="card sidebar-card">
            <div class="card-header">
                @(Model.Hosts.Count == 1 ? "Host" : "Hosts")
            </div>
            <div class="card-body card-body-sm">
                <div class="d-flex flex-column gap-2">
                    @foreach (var host in Model.Hosts.OrderBy(x => x.FullName))
                    {                    
                        <div class="d-flex align-items-center justify-content-start">
                            @await Html.PartialAsync("Members/_MemberAvatar", new MemberAvatarViewModel
                            {
                                Member = host,
                                MaxWidth = 50
                            })
                            <span class="ms-2">
                                <a href="/@Model.Chapter.Name/Members/@host.Id" target="_blank">@host.FullName</a>
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (Model.CanRespond && Model.CurrentMember != null)
    {
        if (Model.Event.TicketSettings != null)
        {
            @await Html.PartialAsync("Events/_EventTicketPurchase", new EventTicketPurchaseViewModel
            {
                Chapter = Model.Chapter,
                ChapterPaymentSettings = Model.ChapterPaymentSettings,
                CurrentMemberId = Model.CurrentMember.Id,
                Event = Model.Event,
                TicketPurchases = Model.TicketPurchases,
                TicketsLeft = Model.SpacesLeft
            })            
        }
        else
        {
            @await Html.PartialAsync("Events/_EventRSVP")
        }    
    }   
    
    @foreach (var responseType in Model.ResponseTypes)
    {
        @if (Model.MembersByResponse.TryGetValue(responseType, out var members))
        {
            @await Html.PartialAsync("Events/_EventSidebarAttendees", new EventSidebarAttendeesViewModel
            {
                Chapter = Model.Chapter,
                Members = members,
                Platform = Model.Platform,
                Title = responseType.ToString(forAction: false)
            })
        }
    }
</div>