@using ODK.Core.Events
@using ODK.Core.Members
@using ODK.Services.Authorization
@using ODK.Services.Caching
@using ODK.Services.Events
@using ODK.Services.Events.ViewModels
@using ODK.Services.Members
@using ODK.Web.Razor.Models.Events
@using ODK.Web.Razor.Models.Members
@model EventPageViewModel
@{
    var responseTypes = new[] { EventResponseType.Yes, EventResponseType.Maybe, EventResponseType.No };
}

<div class="sidebar">
    @if (Model.Hosts.Count > 0)
    {
        <div class="card sidebar-card">
            <div class="card-header">
                @(Model.Hosts.Count == 1 ? "Host" : "Hosts")
            </div>
            <div class="card-body card-body-sm">
                <div class="d-flex flex-column gap-2">
                    @foreach (var host in Model.Hosts.OrderBy(x => x.FullName))
                    {                    
                        <div class="d-flex align-items-center justify-content-start">
                            @await Html.PartialAsync("Members/_MemberAvatar", new MemberAvatarViewModel
                            {
                                ChapterName = Model.Chapter.Name,
                                Member = host,
                                MaxWidth = 50
                            })
                            <span class="ms-2">
                                <a href="/@Model.Chapter.Name/Knitwits/@host.Id" target="_blank">@host.FullName</a>
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <div class="card sidebar-card">
        <div class="card-header">RSVP</div>
        <div class="card-body card-body-sm">
            <div class="d-flex justify-content-around">
                @foreach (var responseType in responseTypes)
                {
                    <form action="/@Model.Chapter.Name/Events/@Model.Event.Id/RSVP" method="post">
                        @await Html.PartialAsync("Events/_EventResponseIcon", new EventResponseIconViewModel
                        {
                            Active = Model.MemberResponse == responseType,
                            ResponseType = responseType
                        })
                    </form>
                }
            </div>
        </div>
    </div>
    
    @foreach (var responseType in responseTypes)
    {
        @if (Model.MembersByResponse.TryGetValue(responseType, out var members))
        {
            @await Html.PartialAsync("Events/_EventSidebarAttendees", new EventSidebarAttendeesViewModel
            {
                Chapter = Model.Chapter,
                Members = members,
                Title = responseType.ToString(forAction: false)
            })
        }
    }
</div>