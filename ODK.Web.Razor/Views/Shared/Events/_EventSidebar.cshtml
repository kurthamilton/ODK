@using ODK.Core.Events
@using ODK.Core.Members
@using ODK.Services.Authorization
@using ODK.Services.Caching
@using ODK.Services.Events
@using ODK.Services.Members
@using ODK.Web.Razor.Models.Events
@using ODK.Web.Razor.Models.Members
@model ODK.Web.Razor.Models.Events.EventSidebarViewModel
@inject IAuthorizationService AuthorizationService
@inject IEventService EventService
@inject IRequestCache RequestCache
@{
    if (Model.Member == null || Model.Member.ChapterId != Model.Chapter.Id)
    {
        return;
    }

    var active = await AuthorizationService.MembershipIsActiveAsync(Model.Member.Id, Model.Chapter.Id);    
    if (!active)
    {
        return;
    }

    var responseTypes = new[] { EventResponseType.Yes, EventResponseType.Maybe, EventResponseType.No };

    var dto = await EventService.GetEventResponsesDto(Model.Event);
    
    var membersById = dto.Members.ToDictionary(x => x.Id);
    var membersByResponse = dto.Responses
        .GroupBy(x => x.ResponseTypeId)
        .ToDictionary(x => x.Key, x => (IReadOnlyCollection<Member>)x.Select(y => membersById[y.MemberId]).ToArray());
    var currentResponse = dto.Responses
        .FirstOrDefault(x => x.MemberId == Model.Member?.Id)?.ResponseTypeId;
}

<div class="sidebar">
    @if (Model.Hosts.Count > 0)
    {
        <div class="card sidebar-card">
            <div class="card-header">
                @(Model.Hosts.Count == 1 ? "Host" : "Hosts")
            </div>
            <div class="card-body card-body-sm">
                <div class="d-flex flex-column gap-2">
                    @foreach (var host in Model.Hosts.OrderBy(x => x.FullName))
                    {                    
                        <div class="d-flex align-items-center">
                            @await Html.PartialAsync("Members/_MemberImage", new MemberImageViewModel(Model.Chapter, host)
                            {
                                ImageHeight = 50,
                                MaxWidth = 50
                            })
                            <span class="ms-2">
                                <a href="/@Model.Chapter.Name/Knitwits/@host.Id" target="_blank">@host.FullName</a>
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <div class="card sidebar-card">
        <div class="card-header">RSVP</div>
        <div class="card-body card-body-sm">
            <div class="d-flex justify-content-around">
                @foreach (EventResponseType responseType in responseTypes)
                {
                    <form method="post">
                        @await Html.PartialAsync("Events/_EventResponseIcon", new EventResponseIconViewModel
                        {
                            Active = currentResponse == responseType,
                            ResponseType = responseType
                        })
                    </form>
                }
            </div>
        </div>
    </div>
    
    @foreach (EventResponseType responseType in responseTypes)
    {
        @if (membersByResponse.TryGetValue(responseType, out var members))
        {
            @await Html.PartialAsync("Events/_EventSidebarAttendees", new EventSidebarAttendeesViewModel(Model.Chapter, members)
            {
                Title = responseType.ToString(forAction: false)
            })
        }
    }
</div>