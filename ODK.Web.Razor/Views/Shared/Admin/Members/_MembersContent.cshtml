@using ODK.Core.Members
@using ODK.Services.Members
@using ODK.Web.Common.Extensions
@model ODK.Core.Chapters.Chapter
@inject IMemberAdminService MemberAdminService
@{
    Guid? memberId = User.MemberId();
    if (memberId == null)
    {
        return;
    }

    Task<IReadOnlyCollection<Member>> membersTask = MemberAdminService.GetMembers(memberId.Value, Model.Id);
    Task<IReadOnlyCollection<MemberSubscription>> subscriptionsTask = MemberAdminService.GetMemberSubscriptions(memberId.Value, Model.Id);
    
    await Task.WhenAll(membersTask, subscriptionsTask);

    IReadOnlyCollection<Member> members = membersTask.Result;
    IDictionary<Guid, MemberSubscription> subscriptions = subscriptionsTask.Result.ToDictionary(x => x.MemberId);

    DateTime subscriptionWarningDate = DateTime.Today.AddDays(7);
}

<h2>Members</h2>
<p>
    <div class="row row-cols-lg-auto g-3 align-items-center">
        <div class="col-12">
            <label class="form-label" for="name-filter">Name</label>
            <input class="form-control" id="name-filter" data-table-filter="#members-table" data-table-filter-field="name" />
        </div>
        <div class="col-12">
            <label class="form-label" for="type-filter">Type</label>
            <select class="form-control" id="type-filter" multiple data-table-filter="#members-table" data-table-filter-field="type">
                @foreach (SubscriptionType type in Enum.GetValues<SubscriptionType>())
                {
                    if (type == SubscriptionType.None)
                    {
                        continue;
                    }

                    if (type != SubscriptionType.Alum)
                    {
                        <option selected>@type</option>
                    }
                    else
                    {
                        <option>@type</option>
                    }
                }
            </select>
        </div>
    </div>
</p>

<table class="table" data-sortable id="members-table" data-table-striped>
    <thead>
    <tr>
        <th data-sortable-sort="default">Name</th>
        <th data-sortable-sort>Type</th>
        <th data-sortable-sort>Expires</th>
        <th>Emails</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Member member in members)
    {
        subscriptions.TryGetValue(member.Id, out MemberSubscription? subscription);

        <tr data-filter-name="@member.FullName" data-filter-type="@subscription?.Type">
            <td>
                <a href="/@Model.Name/Admin/Members/@member.Id" data-sort-value="@member.FullName">
                    @member.FullName
                </a>
            </td>
            <td>@subscription?.Type</td>
            <td>
                <span class="d-none" data-sort-value="@(subscription?.ExpiryDate?.ToString("yyyy-MM-dd") ?? "")"></span>
                <span class="@(subscription?.ExpiryDate < DateTime.Today ? "text-danger" : null)
                             @(subscription?.ExpiryDate < subscriptionWarningDate ? "text-warning" : null)">
                    @subscription?.ExpiryDate?.ToString("yyyy-MM-dd")
                </span>
            </td>
            <td>
                @if (member.EmailOptIn)
                {
                    <i class="fas fa-check-circle text-success"></i>
                }
                else
                {
                    <i class="fas fa-times-circle text-danger"></i>
                }
            </td>
        </tr>
    }
    </tbody>
</table>