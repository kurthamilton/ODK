@using ODK.Core.Events
@using ODK.Core.Utils
@using ODK.Core.Venues
@using ODK.Services
@using ODK.Services.Events
@using ODK.Services.Venues.ViewModels
@using ODK.Web.Common.Extensions
@using ODK.Web.Common.Routes
@model VenuesAdminPageViewModel
@{    
    var (venues, events) = (Model.Venues, Model.Events);

    var eventCounts = events
        .GroupBy(x => x.VenueId)
        .ToDictionary(x => x.Key, x => x.Count());
    var lastEvents = events
        .GroupBy(x => x.VenueId)
        .ToDictionary(x => x.Key, x => x.Max(_ => _.Date));
}

<h2>Venues</h2>
<p>
    <a href="@OdkRoutes2.MemberGroups.VenueCreate(Model.Platform, Model.Chapter)" class="btn btn-primary">Create</a>
</p>
<table class="table table-striped" data-sortable>
    <thead>
    <tr>
        <th data-sortable-sort="default">Name</th>
        <th>Address</th>
        <th data-sortable-sort data-sortable-dir="desc">Events</th>
        <th data-sortable-sort data-sortable-dir="desc">Last Event</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var venue in venues.OrderBy(x => x.Name))
    {
        <tr>
            <td>
                <a data-sort-value="@venue.Name" href="@OdkRoutes2.MemberGroups.Venue(Model.Platform, Model.Chapter, venue.Id)">@venue.Name</a>
            </td>
            <td>@venue.MapQuery</td>
            <td>@(eventCounts.ContainsKey(venue.Id) ? eventCounts[venue.Id] : 0)</td>
            <td>
                @if (lastEvents.TryGetValue(venue.Id, out DateTime lastEventDate))
                {
                    <span class="d-none" data-sort-value="@lastEventDate.ToString("yyyy-MM-dd")"></span>
                    @lastEventDate.EventDate()
                }
            </td>
        </tr>
    }
    </tbody>
</table>