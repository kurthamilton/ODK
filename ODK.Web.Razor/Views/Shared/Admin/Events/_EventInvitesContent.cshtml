@using ODK.Core.Events
@using ODK.Core.Extensions
@using ODK.Core.Features
@using ODK.Core.Utils
@using ODK.Services
@using ODK.Services.Events.ViewModels
@using ODK.Web.Common.Components
@using ODK.Web.Common.Extensions
@using ODK.Web.Common.Routes
@using ODK.Web.Razor.Models.Admin.Events
@using ODK.Web.Razor.Models.Components
@model EventInvitesAdminPageViewModel

@await Html.PartialAsync("Admin/Events/_EventBreadcrumbs", Model)

@await Html.PartialAsync("Admin/Events/_EventHeader")
@await Html.PartialAsync("Admin/Events/_EventAdminTabs")

@if (Model.Invites.SentUtc != null)
{
    <p>
        @Model.Invites.Sent invites were sent on @TimeZoneEntityExtensions.ToLocalTime(Model.Chapter, Model.Invites.SentUtc.Value).ToString("dddd, MMMM d, yyyy")
    </p>

    <section class="section">
        @await Html.PartialAsync("Admin/Events/_EventInviteeUpdate", new EventUpdateViewModel
        {
            Chapter = Model.Chapter,
            EventId = Model.Event.Id
        })
    </section>

    return;
}

<div class="d-flex flex-column gap-3">
    <div>
        <div class="d-flex gap-3">
            <form method="post" action="/groups/@Model.Chapter.Id/events/@Model.Event.Id/invites/send">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-success"
                        onclick="return confirm('Are you sure you want to send invite emails for this event?');">
                    Send invites
                </button>
            </form>
            <form method="post" action="/groups/@Model.Chapter.Id/events/@Model.Event.Id/invites/send/test">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-secondary">Send test</button>
            </form>
        </div>        
        <p class="text-muted ms-1">
            Emails are batched and sent to your admin email address with members included on BCC.
            You will receive 1 email per batch as the admin recipient + your member invite.
        </p>
    </div>    

    <div>
        <h4>Scheduled</h4>
            
        @await Html.PartialAsync("Components/_RestrictedFeature", new RestrictedFeatureViewModel(Model.OwnerSubscription)
        {
            Chapter = Model.Chapter,
            Feature = SiteFeatureType.ScheduledEventEmails,
            Content = await Html.PartialAsync("Admin/Events/_ScheduledEmailForm", new EventScheduledEmailFormViewModel
            {
                Chapter = Model.Chapter,
                EventId = Model.Event.Id,
                ScheduledEmailDate = Model.Chapter.ToChapterTime(Model.Invites.ScheduledUtc)
            })
        })
    </div>   
</div>