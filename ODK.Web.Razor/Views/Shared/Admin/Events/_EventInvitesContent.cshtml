@using ODK.Core.Events
@using ODK.Core.Extensions
@using ODK.Core.Utils
@using ODK.Services
@using ODK.Services.Events.ViewModels
@using ODK.Web.Common.Extensions
@using ODK.Web.Razor.Models.Admin.Events
@model EventInvitesAdminPageViewModel

@await Html.PartialAsync("Admin/Events/_EventHeader")
@await Html.PartialAsync("Admin/Events/_EventAdminTabs")

@if (Model.Invites.SentUtc != null)
{
    <p>
        @Model.Invites.Sent invites were sent on @TimeZoneEntityExtensions.ToLocalTime(Model.Chapter, Model.Invites.SentUtc.Value).ToString("dddd, MMMM d, yyyy")
    </p>
    @await Html.PartialAsync("Admin/Events/_EventResponses")
    @await Html.PartialAsync("Admin/Events/_EventInviteeUpdate", new EventUpdateViewModel
    {
        Chapter = Model.Chapter.Name,
        EventId = Model.Event.Id
    })

    return;
}

<form method="post" action="/@Model.Chapter.Name/Admin/Events/@Model.Event.Id/Invites/Send">
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-success"
            onclick="return confirm('Are you sure you want to send invite emails for this event?');">
        Send invites
    </button>
</form>
<p class="text-muted ms-1">
    Emails are batched and sent to your admin email address with members included on BCC.
    You will receive 1 email per batch as the admin recipient + your member invite.
</p>

<div class="mt-3">
    <form method="post" action="/@Model.Chapter.Name/Admin/Events/@Model.Event.Id/Invites/SendTest">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-secondary">Send test</button>
    </form>
</div>

<div class="mt-3">
    @await Html.PartialAsync("Admin/Events/_ScheduledEmailForm", new EventScheduledEmailFormViewModel
    {
        Chapter = Model.Chapter,
        EventId = Model.Event.Id,
        ScheduledEmailDate = Model.Chapter.ToChapterTime(Model.Invites.ScheduledUtc)
    })
</div>