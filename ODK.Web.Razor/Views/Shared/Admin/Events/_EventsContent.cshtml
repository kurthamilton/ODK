@using ODK.Core.Events
@using ODK.Core.Utils
@using ODK.Core.Venues
@using ODK.Services.Events
@using ODK.Services.Venues
@using ODK.Web.Common.Extensions
@model ODK.Core.Chapters.Chapter
@inject IEventAdminService EventAdminService
@inject IVenueAdminService VenueAdminService
@{
    Guid? memberId = User.MemberId();
    if (memberId == null)
    {
        return;
    }

    IReadOnlyCollection<Event> events = await EventAdminService.GetEvents(memberId.Value, Model.Id, 1, 30);
    IReadOnlyCollection<Guid> eventIds = events
        .Select(x => x.Id)
        .ToArray();

    IReadOnlyCollection<Guid> venueIds = events
        .Select(x => x.VenueId)
        .Distinct()
        .ToArray();

    Task<IReadOnlyCollection<EventInvites>> allInvitesTask = EventAdminService.GetChapterInvites(memberId.Value, Model.Id, eventIds);
    Task<IReadOnlyCollection<EventResponse>> allResponsesTask = EventAdminService.GetChapterResponses(memberId.Value, Model.Id, eventIds);
    Task<IReadOnlyCollection<Venue>> venuesTask = VenueAdminService.GetVenues(memberId.Value, Model.Id, venueIds);

    await Task.WhenAll(allInvitesTask, allResponsesTask, venuesTask);

    IDictionary<Guid, EventInvites> allInvites = allInvitesTask
        .Result
        .ToDictionary(x => x.EventId);

    IDictionary<Guid, EventResponse[]> allResponses = allResponsesTask
        .Result
        .GroupBy(x => x.EventId)
        .ToDictionary(x => x.Key, x => x.ToArray());

    IDictionary<Guid, Venue> venues = venuesTask.Result
        .ToDictionary(x => x.Id);
}

<h2>Events</h2>
<p>
    <a class="btn btn-primary" href="/@Model.Name/Admin/Events/Create">Create</a>
</p>

<table class="table table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>Date</th>
        <th>Venue</th>
        <th><i class="fas fa-envelope"></i></th>
        <th><i class="fas fa-check-circle text-success"></i></th>
        <th><i class="fas fa-question-circle text-warning"></i></th>
        <th><i class="fas fa-times-circle text-danger"></i></th>
    </tr>
    </thead>
    <tbody>
    @foreach (Event @event in events)
    {
        allInvites.TryGetValue(@event.Id, out EventInvites? invites);
        allResponses.TryGetValue(@event.Id, out EventResponse[]? responses);
        IDictionary<EventResponseType, int> responseCounts = responses
            ?.GroupBy(x => x.ResponseTypeId)
            .ToDictionary(x => x.Key, x => x.Count()) ?? new Dictionary<EventResponseType, int>();
        Venue venue = venues[@event.VenueId];

        <tr>
            <td><a href="/@Model.Name/Admin/Events/@(@event.Id)">@(@event.Name)</a></td>
            <td>@(@event.Date.EventDate())</td>
            <td><a href="/@Model.Name/Admin/Venues/@venue.Id">@venue.Name</a></td>
            <td>
                @if (invites == null || invites.SentDate == null)
                {
                    <a href="/@Model.Name/Admin/Events/@(@event.Id)/Invites">Send</a>
                }
                else
                {
                    @invites.Sent
                }
            </td>
            <td>@(responseCounts.ContainsKey(EventResponseType.Yes) ? responseCounts[EventResponseType.Yes] : 0)</td>
            <td>@(responseCounts.ContainsKey(EventResponseType.Maybe) ? responseCounts[EventResponseType.Maybe] : 0)</td>
            <td>@(responseCounts.ContainsKey(EventResponseType.No) ? responseCounts[EventResponseType.No] : 0)</td>
        </tr>
    }
    </tbody>
</table>