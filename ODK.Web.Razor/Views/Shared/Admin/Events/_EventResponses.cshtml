@using ODK.Core.Events
@using ODK.Core.Members
@using ODK.Services
@using ODK.Services.Events
@using ODK.Services.Events.ViewModels
@using ODK.Services.Members
@using ODK.Web.Common.Extensions
@using ODK.Web.Razor.Models.Admin.Events
@using ODK.Web.Razor.Models.Members
@model EventInvitesAdminPageViewModel
@inject IEventAdminService EventAdminService
@inject IMemberService MemberService
@{
    const int cols = 6;
    
    var memberDictionary = Model.Members
        .Where(x => x.IsCurrent())
        .ToDictionary(x => x.Id);
    var responseDictionary = Model.Responses
        .GroupBy(x => x.Type)
        .ToDictionary(x => x.Key, x => x.ToArray());
    var membersByResponse = Model.Responses
        .GroupBy(x => x.Type)
        .ToDictionary(
            group => group.Key, 
            group => group
                .Select(x => new ListMemberViewModel
                {
                    Chapter = Model.Chapter,
                    Member = memberDictionary[x.MemberId],
                    Platform = Model.Platform
                })
                .ToArray());
}

@if (membersByResponse.ContainsKey(EventResponseType.Yes))
{
    <h5>Going</h5>
    @await Html.PartialAsync("Members/_MemberList", new MemberListViewModel
    { 
        Chapter = Model.Chapter,
        Members = membersByResponse[EventResponseType.Yes],
        Size = "xs",
        Cols = cols,
        Platform = Model.Platform
    })
}

@if (membersByResponse.ContainsKey(EventResponseType.Maybe))
{
    <h5>Maybe</h5>
    @await Html.PartialAsync("Members/_MemberList", new MemberListViewModel
    {
        Chapter = Model.Chapter,
        Members = membersByResponse[EventResponseType.Maybe],
        Size = "xs",
        Cols = cols,
        Platform = Model.Platform
    })
}

@if (membersByResponse.ContainsKey(EventResponseType.No))
{
    <h5>Declined</h5>
    @await Html.PartialAsync("Members/_MemberList", new MemberListViewModel
    {
        Chapter = Model.Chapter,
        Members = membersByResponse[EventResponseType.No],
        Size = "xs",
        Cols = cols,
        Platform = Model.Platform
    })
}

@if (membersByResponse.ContainsKey(EventResponseType.None))
{
    <h5>No response</h5>
    @await Html.PartialAsync("Members/_MemberList", new MemberListViewModel
    {
        Chapter = Model.Chapter,
        Members = membersByResponse[EventResponseType.None],
        Size = "xs",
        Cols = cols,
        Platform = Model.Platform
    })
}

@if (membersByResponse.ContainsKey(EventResponseType.NotInvited))
{
    <h5>Not invited</h5>
    @await Html.PartialAsync("Members/_MemberList", new MemberListViewModel
    {
        Chapter = Model.Chapter,
        Members = membersByResponse[EventResponseType.NotInvited],
        Size = "xs",
        Cols = cols,
        Platform = Model.Platform
    })
}