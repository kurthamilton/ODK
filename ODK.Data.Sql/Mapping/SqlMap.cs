using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using ODK.Data.Sql.Reflection;

namespace ODK.Data.Sql.Mapping
{
    public abstract class SqlMap<T>
    {
        private readonly IList<SqlColumn> _columns = new List<SqlColumn>();
        private readonly IDictionary<string, SqlColumn> _entityColumns = new Dictionary<string, SqlColumn>();
        private IReadOnlyList<SqlColumn> _insertColumns;
        private string _insertColumnSql;
        private readonly IList<ISqlComponent> _joins = new List<ISqlComponent>();
        private string _selectColumnSql;
        private IReadOnlyList<SqlColumn> _selectColumns;

        protected SqlMap(string tableName)
        {
            TableName = tableName;
        }

        public IReadOnlyCollection<SqlColumn> InsertColumns => _insertColumns ??= _columns.Where(x => !x.AutoGenerated && x.TableName == TableName).ToArray();

        public IReadOnlyCollection<SqlColumn> SelectColumns => _selectColumns ??= _columns.ToArray();

        public IReadOnlyCollection<ISqlComponent> Joins => _joins.ToArray();

        public string SelectColumnSql => _selectColumnSql ?? (_selectColumnSql = string.Join(",", _columns.Select(x => x.ToSql())));

        public string TableName { get; }

        public SqlColumn GetColumn<TValue>(Expression<Func<T, TValue>> expression)
        {
            string entityFieldName = expression.GetMemberName();
            if (!_entityColumns.ContainsKey(entityFieldName))
            {
                throw new ArgumentException($"Column not found for {entityFieldName}", nameof(entityFieldName));
            }

            return _entityColumns[entityFieldName];
        }

        public string GetEntityFieldName(SqlColumn column)
        {
            string entityFieldName = _entityColumns.FirstOrDefault(x => x.Value.ToSql() == column.ToSql()).Key;
            return _entityColumns.ContainsKey(entityFieldName) ? entityFieldName : null;
        }

        public abstract T Read(IDataReader reader);

        protected void Join<TJoin, TValue>(Expression<Func<T, TValue>> thisField, Expression<Func<TJoin, TValue>> targetField)
        {
            SqlJoin<T, TJoin, TValue> sqlJoin = new SqlJoin<T, TJoin, TValue>(thisField, targetField);            
        }

        protected SqlColumn Property<TValue>(Expression<Func<T, TValue>> expression)
        {
            SqlDbType type = SqlDbTypes.GetSqlDbType<TValue>();

            string entityFieldName = expression.GetMemberName();
            SqlColumn column = new SqlColumn(entityFieldName)
                .HasColumnType(type)
                .FromTable(TableName);

            _columns.Add(column);
            _entityColumns.Add(entityFieldName, column);

            return column;
        }
    }
}
