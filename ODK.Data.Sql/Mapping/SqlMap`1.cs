using System.Data;
using System.Linq.Expressions;
using ODK.Data.Sql.Reflection;

namespace ODK.Data.Sql.Mapping;

public abstract class SqlMap<T> : SqlMap
{
    private readonly IList<SqlColumn> _columns = new List<SqlColumn>();
    private readonly IDictionary<string, SqlColumn> _entityColumns = new Dictionary<string, SqlColumn>();
    private IReadOnlyList<SqlColumn>? _insertColumns;
    private readonly IList<ISqlComponent> _joins = new List<ISqlComponent>();
    private IReadOnlyList<SqlColumn>? _selectColumns;

    protected SqlMap(string tableName)
        : base(tableName, typeof(T))
    {
    }

    public IReadOnlyCollection<SqlColumn> InsertColumns => GetInsertColumns();

    public IReadOnlyCollection<ISqlComponent> Joins => _joins.ToArray();

    public IReadOnlyCollection<SqlColumn> SelectColumns => _selectColumns ??= _columns.ToArray();

    public SqlColumn GetColumn<TValue>(Expression<Func<T, TValue>> expression)
    {
        string entityFieldName = expression.GetMemberName();
        if (!_entityColumns.ContainsKey(entityFieldName))
        {
            throw new ArgumentException($"Column not found for {entityFieldName}", nameof(entityFieldName));
        }

        return _entityColumns[entityFieldName];
    }

    public object? GetEntityValue(T entity, SqlColumn column, SqlContext context)
    {
        var entityFieldName = GetEntityFieldName(column, context);
        return Type.GetProperty(entityFieldName)?.GetValue(entity);
    }

    public abstract T Read(IDataReader reader);

    protected void Join<TJoin, TValue>(Expression<Func<T, TValue>> thisField, Expression<Func<TJoin, TValue>> targetField)
    {
        Join<T, TJoin, TValue>(thisField, targetField);
    }

    protected void Join<TFrom, TTo, TValue>(Expression<Func<TFrom, TValue>> thisField, Expression<Func<TTo, TValue>> targetField)
    {
        _joins.Add(new SqlJoin<TFrom, TTo, TValue>(thisField, targetField));
    }

    protected SqlColumn Property<TValue>(Expression<Func<T, TValue>> expression)
    {
        SqlDbType type = SqlDbTypes.GetSqlDbType<TValue>();

        string entityFieldName = expression.GetMemberName();
        SqlColumn column = new SqlColumn(entityFieldName, _entityColumns.Count)
            .HasColumnType(type)
            .From<T>();

        _columns.Add(column);
        _entityColumns.Add(entityFieldName, column);

        return column;
    }

    private string? GetEntityFieldName(SqlColumn column, SqlContext context)
    {
        string entityFieldName = _entityColumns.FirstOrDefault(x => x.Value.ToSql(context) == column.ToSql(context)).Key;
        return _entityColumns.ContainsKey(entityFieldName) ? entityFieldName : null;
    }

    private IReadOnlyCollection<SqlColumn> GetInsertColumns()
    {
        return _insertColumns ??= _columns.Where(x => !x.AutoGenerated && x.IsFrom<T>()).ToArray();
    }
}
